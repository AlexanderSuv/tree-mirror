!function(g){function I(C){if(n[C])return n[C].exports;var t=n[C]={i:C,l:!1,exports:{}};return g[C].call(t.exports,t,t.exports,I),t.l=!0,t.exports}var n={};return I.m=g,I.c=n,I.i=function(g){return g},I.d=function(g,I,n){Object.defineProperty(g,I,{configurable:!1,enumerable:!0,get:n})},I.n=function(g){var n=g&&g.__esModule?function(){return g.default}:function(){return g};return I.d(n,"a",n),n},I.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},I.p="/",I(I.s=2)}([function(module,exports,__webpack_require__){"use strict";eval('"use strict";\n\nvar _mutationSummary = __webpack_require__(/*! ./mutation-summary */ 1);\n\nif (true) {\n    console.log(_mutationSummary.MutationSummary);\n    console.log(_mutationSummary.MutationSummary.NodeMap);\n}\n\nvar TreeMirror = function () {\n    function TreeMirror(root, delegate) {\n        this.root = root;\n        this.delegate = delegate;\n        this.idMap = {};\n    }\n    TreeMirror.prototype.initialize = function (rootId, children) {\n        this.idMap[rootId] = this.root;\n\n        for (var i = 0; i < children.length; i++) {\n            this.deserializeNode(children[i], this.root);\n        }\n    };\n\n    TreeMirror.prototype.applyChanged = function (removed, addedOrMoved, attributes, text) {\n        var _this = this;\n        // NOTE: Applying the changes can result in an attempting to add a child\n        // to a parent which is presently an ancestor of the parent. This can occur\n        // based on random ordering of moves. The way we handle this is to first\n        // remove all changed nodes from their parents, then apply.\n        addedOrMoved.forEach(function (data) {\n            var node = _this.deserializeNode(data);\n            var parent = _this.deserializeNode(data.parentNode);\n            var previous = _this.deserializeNode(data.previousSibling);\n            if (node.parentNode) node.parentNode.removeChild(node);\n        });\n\n        removed.forEach(function (data) {\n            var node = _this.deserializeNode(data);\n            if (node.parentNode) node.parentNode.removeChild(node);\n        });\n\n        addedOrMoved.forEach(function (data) {\n            var node = _this.deserializeNode(data);\n            var parent = _this.deserializeNode(data.parentNode);\n            var previous = _this.deserializeNode(data.previousSibling);\n            parent.insertBefore(node, previous ? previous.nextSibling : parent.firstChild);\n        });\n\n        attributes.forEach(function (data) {\n            var node = _this.deserializeNode(data);\n            Object.keys(data.attributes).forEach(function (attrName) {\n                var newVal = data.attributes[attrName];\n                if (newVal === null) {\n                    node.removeAttribute(attrName);\n                } else {\n                    if (!_this.delegate || !_this.delegate.setAttribute || !_this.delegate.setAttribute(node, attrName, newVal)) {\n                        node.setAttribute(attrName, newVal);\n                    }\n                }\n            });\n        });\n\n        text.forEach(function (data) {\n            var node = _this.deserializeNode(data);\n            node.textContent = data.textContent;\n        });\n\n        removed.forEach(function (node) {\n            delete _this.idMap[node.id];\n        });\n    };\n\n    TreeMirror.prototype.deserializeNode = function (nodeData, parent) {\n        var _this = this;\n        if (nodeData === null) return null;\n\n        var node = this.idMap[nodeData.id];\n        if (node) return node;\n\n        var doc = this.root.ownerDocument;\n        if (doc === null) doc = this.root;\n\n        switch (nodeData.nodeType) {\n            case Node.COMMENT_NODE:\n                node = doc.createComment(nodeData.textContent);\n                break;\n\n            case Node.TEXT_NODE:\n                node = doc.createTextNode(nodeData.textContent);\n                break;\n\n            case Node.DOCUMENT_TYPE_NODE:\n                node = doc.implementation.createDocumentType(nodeData.name, nodeData.publicId, nodeData.systemId);\n                break;\n\n            case Node.ELEMENT_NODE:\n                if (this.delegate && this.delegate.createElement) node = this.delegate.createElement(nodeData.tagName);\n                if (!node) node = doc.createElement(nodeData.tagName);\n\n                Object.keys(nodeData.attributes).forEach(function (name) {\n                    try {\n                        if (!_this.delegate || !_this.delegate.setAttribute || !_this.delegate.setAttribute(node, name, nodeData.attributes[name])) {\n                            node.setAttribute(name, nodeData.attributes[name]);\n                        }\n                    } catch (e) {\n                        // Debug here if needed\n                    }\n                });\n\n                break;\n        }\n\n        if (!node) throw "ouch";\n\n        this.idMap[nodeData.id] = node;\n\n        if (parent) parent.appendChild(node);\n\n        if (nodeData.childNodes) {\n            for (var i = 0; i < nodeData.childNodes.length; i++) {\n                this.deserializeNode(nodeData.childNodes[i], node);\n            }\n        }\n\n        return node;\n    };\n    return TreeMirror;\n}();\n\nvar TreeMirrorClient = function () {\n\n    function TreeMirrorClient(target, mirror, testingQueries) {\n        var _this = this;\n        this.target = target;\n        this.mirror = mirror;\n        this.nextId = 1;\n        this.knownNodes = new _mutationSummary.MutationSummary.NodeMap();\n\n        if (typeof this.mirror == "undefined") {\n            this.mirror = _this.getDefaultMirror();\n        }\n\n        var rootId = this.serializeNode(target).id;\n        var children = [];\n        for (var child = target.firstChild; child; child = child.nextSibling) {\n            children.push(this.serializeNode(child, true));\n        }this.mirror.initialize(rootId, children);\n\n        var self = this;\n\n        var queries = [{ all: true }];\n\n        if (testingQueries) queries = queries.concat(testingQueries);\n\n        var MutationObserverCtor;\n\n        try {\n            if (typeof WebKitMutationObserver !== \'undefined\') MutationObserverCtor = WebKitMutationObserver;else MutationObserverCtor = MutationObserver;\n        } catch (e) {\n            MutationObserverCtor = undefined;\n        };\n\n        if (MutationObserverCtor !== undefined) {\n            this.mutationSummary = new _mutationSummary.MutationSummary({\n                rootNode: target,\n                callback: function callback(summaries) {\n                    _this.applyChanged(summaries);\n                },\n                queries: queries\n            });\n        }\n    }\n\n    TreeMirrorClient.prototype.getDefaultMirror = function () {\n        return {\n            initialize: function initialize(rootId, children) {\n                return;\n            },\n            applyChanged: function applyChanged(removed, addedOrMoved, attributes, text) {\n                return;\n            }\n        };\n    };\n\n    TreeMirrorClient.prototype.disconnect = function () {\n        if (this.mutationSummary) {\n            this.mutationSummary.disconnect();\n            this.mutationSummary = undefined;\n        }\n    };\n\n    TreeMirrorClient.prototype.rememberNode = function (node) {\n        var id = this.nextId++;\n        this.knownNodes.set(node, id);\n        return id;\n    };\n\n    TreeMirrorClient.prototype.forgetNode = function (node) {\n        this.knownNodes.delete(node);\n    };\n\n    TreeMirrorClient.prototype.serializeNode = function (node, recursive) {\n        if (node === null) return null;\n\n        var id = this.knownNodes.get(node);\n        if (id !== undefined) {\n            return { id: id };\n        }\n\n        var data = {\n            nodeType: node.nodeType,\n            id: this.rememberNode(node)\n        };\n\n        switch (data.nodeType) {\n            case Node.DOCUMENT_TYPE_NODE:\n                var docType = node;\n                data.name = docType.name;\n                data.publicId = docType.publicId;\n                data.systemId = docType.systemId;\n                break;\n\n            case Node.COMMENT_NODE:\n            case Node.TEXT_NODE:\n                data.textContent = node.textContent;\n                break;\n\n            case Node.ELEMENT_NODE:\n                var elm = node;\n                data.tagName = elm.tagName;\n                data.attributes = {};\n                for (var i = 0; i < elm.attributes.length; i++) {\n                    var attr = elm.attributes[i];\n                    data.attributes[attr.name] = attr.value;\n                }\n\n                if (recursive && elm.childNodes.length) {\n                    data.childNodes = [];\n\n                    for (var child = elm.firstChild; child; child = child.nextSibling) {\n                        data.childNodes.push(this.serializeNode(child, true));\n                    }\n                }\n                break;\n        }\n\n        return data;\n    };\n\n    TreeMirrorClient.prototype.serializeAddedAndMoved = function (added, reparented, reordered) {\n        var _this = this;\n        var all = added.concat(reparented).concat(reordered);\n\n        var parentMap = new _mutationSummary.MutationSummary.NodeMap();\n\n        all.forEach(function (node) {\n            var parent = node.parentNode;\n            var children = parentMap.get(parent);\n            if (!children) {\n                children = new _mutationSummary.MutationSummary.NodeMap();\n                parentMap.set(parent, children);\n            }\n\n            children.set(node, true);\n        });\n\n        var moved = [];\n\n        parentMap.keys().forEach(function (parent) {\n            var children = parentMap.get(parent);\n\n            var keys = children.keys();\n            while (keys.length) {\n                var node = keys[0];\n                while (node.previousSibling && children.has(node.previousSibling)) {\n                    node = node.previousSibling;\n                }while (node && children.has(node)) {\n                    var data = _this.serializeNode(node);\n                    data.previousSibling = _this.serializeNode(node.previousSibling);\n                    data.parentNode = _this.serializeNode(node.parentNode);\n                    moved.push(data);\n                    children.delete(node);\n                    node = node.nextSibling;\n                }\n\n                var keys = children.keys();\n            }\n        });\n\n        return moved;\n    };\n\n    TreeMirrorClient.prototype.serializeAttributeChanges = function (attributeChanged) {\n        var _this = this;\n        var map = new _mutationSummary.MutationSummary.NodeMap();\n\n        Object.keys(attributeChanged).forEach(function (attrName) {\n            attributeChanged[attrName].forEach(function (element) {\n                var record = map.get(element);\n                if (!record) {\n                    record = _this.serializeNode(element);\n                    record.attributes = {};\n                    map.set(element, record);\n                }\n\n                record.attributes[attrName] = element.getAttribute(attrName);\n            });\n        });\n\n        return map.keys().map(function (node) {\n            return map.get(node);\n        });\n    };\n\n    TreeMirrorClient.prototype.applyChanged = function (summaries) {\n        var _this = this;\n        var summary = summaries[0];\n\n        var removed = summary.removed.map(function (node) {\n            return _this.serializeNode(node);\n        });\n\n        var moved = this.serializeAddedAndMoved(summary.added, summary.reparented, summary.reordered);\n\n        var attributes = this.serializeAttributeChanges(summary.attributeChanged);\n\n        var text = summary.characterDataChanged.map(function (node) {\n            var data = _this.serializeNode(node);\n            data.textContent = node.textContent;\n            return data;\n        });\n\n        this.mirror.applyChanged(removed, moved, attributes, text);\n\n        summary.removed.forEach(function (node) {\n            _this.forgetNode(node);\n        });\n    };\n    return TreeMirrorClient;\n}();\n\nmodule.exports = {\n    TreeMirror: TreeMirror,\n    TreeMirrorClient: TreeMirrorClient\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,')},function(module,exports){"use strict";eval("'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Copyright 2011 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar MutationObserverCtor;\n\ntry {\n    if (typeof WebKitMutationObserver !== 'undefined') MutationObserverCtor = WebKitMutationObserver;else MutationObserverCtor = MutationObserver;\n} catch (e) {\n    MutationObserverCtor = undefined;\n}\n\nvar NodeMap = function () {\n    function NodeMap() {\n        _classCallCheck(this, NodeMap);\n\n        this.nodes = [];\n        this.values = [];\n        this.ID_PROP = '__mutation_summary_node_map_id__';\n        this.nextId_ = 1;\n    }\n\n    _createClass(NodeMap, [{\n        key: 'isIndex',\n        value: function isIndex(s) {\n            return +s === s >>> 0;\n        }\n    }, {\n        key: 'nodeId',\n        value: function nodeId(node) {\n            var id = node[this.ID_PROP];\n            if (!id) id = node[this.ID_PROP] = this.nextId_++;\n            return id;\n        }\n    }, {\n        key: 'set',\n        value: function set(node, value) {\n            var id = this.nodeId(node);\n            this.nodes[id] = node;\n            this.values[id] = value;\n        }\n    }, {\n        key: 'get',\n        value: function get(node) {\n            var id = this.nodeId(node);\n            return this.values[id];\n        }\n    }, {\n        key: 'has',\n        value: function has(node) {\n            return this.nodeId(node) in this.nodes;\n        }\n    }, {\n        key: 'delete',\n        value: function _delete(node) {\n            var id = this.nodeId(node);\n            delete this.nodes[id];\n            this.values[id] = undefined;\n        }\n    }, {\n        key: 'keys',\n        value: function keys() {\n            var nodes = [];\n            for (var id in this.nodes) {\n                if (!this.isIndex(id)) continue;\n                nodes.push(this.nodes[id]);\n            }\n\n            return nodes;\n        }\n    }]);\n\n    return NodeMap;\n}();\n\nvar Movement;\n(function (Movement) {\n    Movement[Movement[\"STAYED_OUT\"] = 0] = \"STAYED_OUT\";\n    Movement[Movement[\"ENTERED\"] = 1] = \"ENTERED\";\n    Movement[Movement[\"STAYED_IN\"] = 2] = \"STAYED_IN\";\n    Movement[Movement[\"REPARENTED\"] = 3] = \"REPARENTED\";\n    Movement[Movement[\"REORDERED\"] = 4] = \"REORDERED\";\n    Movement[Movement[\"EXITED\"] = 5] = \"EXITED\";\n})(Movement || (Movement = {}));\n\nfunction enteredOrExited(changeType) {\n    return changeType === 1 /* ENTERED */ || changeType === 5 /* EXITED */;\n}\n\nvar NodeChange = function () {\n    function NodeChange(node) {\n        var childList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var characterData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        var oldParentNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n        var added = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n        var attributeOldValues = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n        var characterDataOldValue = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n\n        _classCallCheck(this, NodeChange);\n\n        this.node = node;\n        this.childList = childList;\n        this.attributes = attributes;\n        this.characterData = characterData;\n        this.oldParentNode = oldParentNode;\n        this.added = added;\n        this.attributeOldValues = attributeOldValues;\n        this.characterDataOldValue = characterDataOldValue;\n        this.isCaseInsensitive = this.node.nodeType === Node.ELEMENT_NODE && this.node instanceof HTMLElement && this.node.ownerDocument instanceof HTMLDocument;\n    }\n\n    _createClass(NodeChange, [{\n        key: 'getAttributeOldValue',\n        value: function getAttributeOldValue(name) {\n            if (!this.attributeOldValues) return undefined;\n            if (this.isCaseInsensitive) name = name.toLowerCase();\n            return this.attributeOldValues[name];\n        }\n    }, {\n        key: 'getAttributeNamesMutated',\n        value: function getAttributeNamesMutated() {\n            var names = [];\n            if (!this.attributeOldValues) return names;\n            for (var name in this.attributeOldValues) {\n                names.push(name);\n            }\n            return names;\n        }\n    }, {\n        key: 'attributeMutated',\n        value: function attributeMutated(name, oldValue) {\n            this.attributes = true;\n            this.attributeOldValues = this.attributeOldValues || {};\n\n            if (name in this.attributeOldValues) return;\n\n            this.attributeOldValues[name] = oldValue;\n        }\n    }, {\n        key: 'characterDataMutated',\n        value: function characterDataMutated(oldValue) {\n            if (this.characterData) return;\n            this.characterData = true;\n            this.characterDataOldValue = oldValue;\n        }\n\n        // Note: is it possible to receive a removal followed by a removal. This\n        // can occur if the removed node is added to an non-observed node, that\n        // node is added to the observed area, and then the node removed from\n        // it.\n\n    }, {\n        key: 'removedFromParent',\n        value: function removedFromParent(parent) {\n            this.childList = true;\n            if (this.added || this.oldParentNode) this.added = false;else this.oldParentNode = parent;\n        }\n    }, {\n        key: 'insertedIntoParent',\n        value: function insertedIntoParent() {\n            this.childList = true;\n            this.added = true;\n        }\n\n        // An node's oldParent is\n        //   -its present parent, if its parentNode was not changed.\n        //   -null if the first thing that happened to it was an add.\n        //   -the node it was removed from if the first thing that happened to it\n        //      was a remove.\n\n    }, {\n        key: 'getOldParent',\n        value: function getOldParent() {\n            if (this.childList) {\n                if (this.oldParentNode) return this.oldParentNode;\n                if (this.added) return null;\n            }\n\n            return this.node.parentNode;\n        }\n    }]);\n\n    return NodeChange;\n}();\n\nfunction ChildListChange() {\n    this.added = new NodeMap();\n    this.removed = new NodeMap();\n    this.maybeMoved = new NodeMap();\n    this.oldPrevious = new NodeMap();\n    this.moved = undefined;\n}\n\nvar TreeChanges = function (_NodeMap) {\n    _inherits(TreeChanges, _NodeMap);\n\n    function TreeChanges(rootNode, mutations) {\n        _classCallCheck(this, TreeChanges);\n\n        var _this2 = _possibleConstructorReturn(this, (TreeChanges.__proto__ || Object.getPrototypeOf(TreeChanges)).call(this));\n\n        _this2.rootNode = rootNode;\n        _this2.reachableCache = undefined;\n        _this2.wasReachableCache = undefined;\n        _this2.anyParentsChanged = false;\n        _this2.anyAttributesChanged = false;\n        _this2.anyCharacterDataChanged = false;\n\n        for (var m = 0; m < mutations.length; m++) {\n            var mutation = mutations[m];\n            switch (mutation.type) {\n\n                case 'childList':\n                    _this2.anyParentsChanged = true;\n                    for (var i = 0; i < mutation.removedNodes.length; i++) {\n                        var node = mutation.removedNodes[i];\n                        _this2.getChange(node).removedFromParent(mutation.target);\n                    }\n                    for (var i = 0; i < mutation.addedNodes.length; i++) {\n                        var node = mutation.addedNodes[i];\n                        _this2.getChange(node).insertedIntoParent();\n                    }\n                    break;\n\n                case 'attributes':\n                    _this2.anyAttributesChanged = true;\n                    var change = _this2.getChange(mutation.target);\n                    change.attributeMutated(mutation.attributeName, mutation.oldValue);\n                    break;\n\n                case 'characterData':\n                    _this2.anyCharacterDataChanged = true;\n                    var change = _this2.getChange(mutation.target);\n                    change.characterDataMutated(mutation.oldValue);\n                    break;\n            }\n        }\n        return _this2;\n    }\n\n    _createClass(TreeChanges, [{\n        key: 'getChange',\n        value: function getChange(node) {\n            var change = this.get(node);\n            if (!change) {\n                change = new NodeChange(node);\n                this.set(node, change);\n            }\n            return change;\n        }\n    }, {\n        key: 'getOldParent',\n        value: function getOldParent(node) {\n            var change = this.get(node);\n            return change ? change.getOldParent() : node.parentNode;\n        }\n    }, {\n        key: 'getIsReachable',\n        value: function getIsReachable(node) {\n            if (node === this.rootNode) return true;\n            if (!node) return false;\n\n            this.reachableCache = this.reachableCache || new NodeMap();\n            var isReachable = this.reachableCache.get(node);\n            if (isReachable === undefined) {\n                isReachable = this.getIsReachable(node.parentNode);\n                this.reachableCache.set(node, isReachable);\n            }\n            return isReachable;\n        }\n\n        // A node wasReachable if its oldParent wasReachable.\n\n    }, {\n        key: 'getWasReachable',\n        value: function getWasReachable(node) {\n            if (node === this.rootNode) return true;\n            if (!node) return false;\n\n            this.wasReachableCache = this.wasReachableCache || new NodeMap();\n            var wasReachable = this.wasReachableCache.get(node);\n            if (wasReachable === undefined) {\n                wasReachable = this.getWasReachable(this.getOldParent(node));\n                this.wasReachableCache.set(node, wasReachable);\n            }\n            return wasReachable;\n        }\n    }, {\n        key: 'reachabilityChange',\n        value: function reachabilityChange(node) {\n            if (this.getIsReachable(node)) {\n                return this.getWasReachable(node) ? 2 /* STAYED_IN */ : 1 /* ENTERED */;\n            }\n\n            return this.getWasReachable(node) ? 5 /* EXITED */ : 0 /* STAYED_OUT */;\n        }\n    }]);\n\n    return TreeChanges;\n}(NodeMap);\n\nfunction MutationProjection(rootNode, mutations, selectors, calcReordered, calcOldPreviousSibling) {\n    this.rootNode = rootNode;\n    this.mutations = mutations;\n    this.selectors = selectors;\n    this.calcReordered = calcReordered;\n    this.calcOldPreviousSibling = calcOldPreviousSibling;\n    this.treeChanges = new TreeChanges(rootNode, mutations);\n    this.entered = [];\n    this.exited = [];\n    this.stayedIn = new NodeMap();\n    this.visited = new NodeMap();\n    this.childListChangeMap = undefined;\n    this.characterDataOnly = undefined;\n    this.matchCache = undefined;\n\n    this.processMutations();\n}\n\nMutationProjection.prototype.processMutations = function () {\n    if (!this.treeChanges.anyParentsChanged && !this.treeChanges.anyAttributesChanged) return;\n\n    var changedNodes = this.treeChanges.keys();\n    for (var i = 0; i < changedNodes.length; i++) {\n        this.visitNode(changedNodes[i], undefined);\n    }\n};\n\nMutationProjection.prototype.visitNode = function (node, parentReachable) {\n    if (this.visited.has(node)) return;\n\n    this.visited.set(node, true);\n\n    var change = this.treeChanges.get(node);\n    var reachable = parentReachable;\n\n    // node inherits its parent's reachability change unless\n    // its parentNode was mutated.\n    if (change && change.childList || reachable == undefined) reachable = this.treeChanges.reachabilityChange(node);\n\n    if (reachable === 0 /* STAYED_OUT */) return;\n\n    // Cache match results for sub-patterns.\n    this.matchabilityChange(node);\n\n    if (reachable === 1 /* ENTERED */) {\n            this.entered.push(node);\n        } else if (reachable === 5 /* EXITED */) {\n            this.exited.push(node);\n            this.ensureHasOldPreviousSiblingIfNeeded(node);\n        } else if (reachable === 2 /* STAYED_IN */) {\n            var movement = 2 /* STAYED_IN */;\n\n            if (change && change.childList) {\n                if (change.oldParentNode !== node.parentNode) {\n                    movement = 3 /* REPARENTED */;\n                    this.ensureHasOldPreviousSiblingIfNeeded(node);\n                } else if (this.calcReordered && this.wasReordered(node)) {\n                    movement = 4 /* REORDERED */;\n                }\n            }\n\n            this.stayedIn.set(node, movement);\n        }\n\n    if (reachable === 2 /* STAYED_IN */) return;\n\n    for (var child = node.firstChild; child; child = child.nextSibling) {\n        this.visitNode(child, reachable);\n    }\n};\n\nMutationProjection.prototype.ensureHasOldPreviousSiblingIfNeeded = function (node) {\n    if (!this.calcOldPreviousSibling) return;\n\n    this.processChildlistChanges();\n\n    var parentNode = node.parentNode;\n    var nodeChange = this.treeChanges.get(node);\n    if (nodeChange && nodeChange.oldParentNode) parentNode = nodeChange.oldParentNode;\n\n    var change = this.childListChangeMap.get(parentNode);\n    if (!change) {\n        change = new ChildListChange();\n        this.childListChangeMap.set(parentNode, change);\n    }\n\n    if (!change.oldPrevious.has(node)) {\n        change.oldPrevious.set(node, node.previousSibling);\n    }\n};\n\nMutationProjection.prototype.getChanged = function (summary, selectors, characterDataOnly) {\n    this.selectors = selectors;\n    this.characterDataOnly = characterDataOnly;\n\n    for (var i = 0; i < this.entered.length; i++) {\n        var node = this.entered[i];\n        var matchable = this.matchabilityChange(node);\n        if (matchable === 1 /* ENTERED */ || matchable === 2 /* STAYED_IN */) summary.added.push(node);\n    }\n\n    var stayedInNodes = this.stayedIn.keys();\n    for (var i = 0; i < stayedInNodes.length; i++) {\n        var node = stayedInNodes[i];\n        var matchable = this.matchabilityChange(node);\n\n        if (matchable === 1 /* ENTERED */) {\n                summary.added.push(node);\n            } else if (matchable === 5 /* EXITED */) {\n                summary.removed.push(node);\n            } else if (matchable === 2 /* STAYED_IN */ && (summary.reparented || summary.reordered)) {\n            var movement = this.stayedIn.get(node);\n            if (summary.reparented && movement === 3 /* REPARENTED */) summary.reparented.push(node);else if (summary.reordered && movement === 4 /* REORDERED */) summary.reordered.push(node);\n        }\n    }\n\n    for (var i = 0; i < this.exited.length; i++) {\n        var node = this.exited[i];\n        var matchable = this.matchabilityChange(node);\n        if (matchable === 5 /* EXITED */ || matchable === 2 /* STAYED_IN */) summary.removed.push(node);\n    }\n};\n\nMutationProjection.prototype.getOldParentNode = function (node) {\n    var change = this.treeChanges.get(node);\n    if (change && change.childList) return change.oldParentNode ? change.oldParentNode : null;\n\n    var reachabilityChange = this.treeChanges.reachabilityChange(node);\n    if (reachabilityChange === 0 /* STAYED_OUT */ || reachabilityChange === 1 /* ENTERED */) throw Error('getOldParentNode requested on invalid node.');\n\n    return node.parentNode;\n};\n\nMutationProjection.prototype.getOldPreviousSibling = function (node) {\n    var parentNode = node.parentNode;\n    var nodeChange = this.treeChanges.get(node);\n    if (nodeChange && nodeChange.oldParentNode) parentNode = nodeChange.oldParentNode;\n\n    var change = this.childListChangeMap.get(parentNode);\n    if (!change) throw Error('getOldPreviousSibling requested on invalid node.');\n\n    return change.oldPrevious.get(node);\n};\n\nMutationProjection.prototype.getOldAttribute = function (element, attrName) {\n    var change = this.treeChanges.get(element);\n    if (!change || !change.attributes) throw Error('getOldAttribute requested on invalid node.');\n\n    var value = change.getAttributeOldValue(attrName);\n    if (value === undefined) throw Error('getOldAttribute requested for unchanged attribute name.');\n\n    return value;\n};\n\nMutationProjection.prototype.attributeChangedNodes = function (includeAttributes) {\n    if (!this.treeChanges.anyAttributesChanged) return {};\n\n    var attributeFilter;\n    var caseInsensitiveFilter;\n    if (includeAttributes) {\n        attributeFilter = {};\n        caseInsensitiveFilter = {};\n        for (var i = 0; i < includeAttributes.length; i++) {\n            var attrName = includeAttributes[i];\n            attributeFilter[attrName] = true;\n            caseInsensitiveFilter[attrName.toLowerCase()] = attrName;\n        }\n    }\n\n    var result = {};\n    var nodes = this.treeChanges.keys();\n\n    for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n\n        var change = this.treeChanges.get(node);\n        if (!change.attributes) continue;\n\n        if (2 /* STAYED_IN */ !== this.treeChanges.reachabilityChange(node) || 2 /* STAYED_IN */ !== this.matchabilityChange(node)) {\n            continue;\n        }\n\n        var element = node;\n        var changedAttrNames = change.getAttributeNamesMutated();\n        for (var j = 0; j < changedAttrNames.length; j++) {\n            var attrName = changedAttrNames[j];\n\n            if (attributeFilter && !attributeFilter[attrName] && !(change.isCaseInsensitive && caseInsensitiveFilter[attrName])) {\n                continue;\n            }\n\n            var oldValue = change.getAttributeOldValue(attrName);\n            if (oldValue === element.getAttribute(attrName)) continue;\n\n            if (caseInsensitiveFilter && change.isCaseInsensitive) attrName = caseInsensitiveFilter[attrName];\n\n            result[attrName] = result[attrName] || [];\n            result[attrName].push(element);\n        }\n    }\n\n    return result;\n};\n\nMutationProjection.prototype.getOldCharacterData = function (node) {\n    var change = this.treeChanges.get(node);\n    if (!change || !change.characterData) throw Error('getOldCharacterData requested on invalid node.');\n\n    return change.characterDataOldValue;\n};\n\nMutationProjection.prototype.getCharacterDataChanged = function () {\n    if (!this.treeChanges.anyCharacterDataChanged) return [];\n\n    var nodes = this.treeChanges.keys();\n    var result = [];\n    for (var i = 0; i < nodes.length; i++) {\n        var target = nodes[i];\n        if (2 /* STAYED_IN */ !== this.treeChanges.reachabilityChange(target)) continue;\n\n        var change = this.treeChanges.get(target);\n        if (!change.characterData || target.textContent == change.characterDataOldValue) continue;\n\n        result.push(target);\n    }\n\n    return result;\n};\n\nMutationProjection.prototype.computeMatchabilityChange = function (selector, el) {\n    if (!this.matchCache) this.matchCache = [];\n    if (!this.matchCache[selector.uid]) this.matchCache[selector.uid] = new NodeMap();\n\n    var cache = this.matchCache[selector.uid];\n    var result = cache.get(el);\n    if (result === undefined) {\n        result = selector.matchabilityChange(el, this.treeChanges.get(el));\n        cache.set(el, result);\n    }\n    return result;\n};\n\nMutationProjection.prototype.matchabilityChange = function (node) {\n    var _this = this;\n    // TODO(rafaelw): Include PI, CDATA?\n    // Only include text nodes.\n    if (this.characterDataOnly) {\n        switch (node.nodeType) {\n            case Node.COMMENT_NODE:\n            case Node.TEXT_NODE:\n                return 2 /* STAYED_IN */;\n            default:\n                return 0 /* STAYED_OUT */;\n        }\n    }\n\n    // No element filter. Include all nodes.\n    if (!this.selectors) return 2 /* STAYED_IN */;\n\n    // Element filter. Exclude non-elements.\n    if (node.nodeType !== Node.ELEMENT_NODE) return 0 /* STAYED_OUT */;\n\n    var el = node;\n\n    var matchChanges = this.selectors.map(function (selector) {\n        return _this.computeMatchabilityChange(selector, el);\n    });\n\n    var accum = 0 /* STAYED_OUT */;\n    var i = 0;\n\n    while (accum !== 2 /* STAYED_IN */ && i < matchChanges.length) {\n        switch (matchChanges[i]) {\n            case 2 /* STAYED_IN */:\n                accum = 2 /* STAYED_IN */;\n                break;\n            case 1 /* ENTERED */:\n                if (accum === 5 /* EXITED */) accum = 2 /* STAYED_IN */;else accum = 1 /* ENTERED */;\n                break;\n            case 5 /* EXITED */:\n                if (accum === 1 /* ENTERED */) accum = 2 /* STAYED_IN */;else accum = 5 /* EXITED */;\n                break;\n        }\n\n        i++;\n    }\n\n    return accum;\n};\n\nMutationProjection.prototype.getChildlistChange = function (el) {\n    var change = this.childListChangeMap.get(el);\n    if (!change) {\n        change = new ChildListChange();\n        this.childListChangeMap.set(el, change);\n    }\n\n    return change;\n};\n\nMutationProjection.prototype.processChildlistChanges = function () {\n    var _this3 = this;\n\n    if (this.childListChangeMap) return;\n\n    this.childListChangeMap = new NodeMap();\n\n    var _loop = function _loop() {\n        mutation = _this3.mutations[i];\n\n        if (mutation.type != 'childList') return 'continue';\n\n        if (_this3.treeChanges.reachabilityChange(mutation.target) !== 2 /* STAYED_IN */ && !_this3.calcOldPreviousSibling) return 'continue';\n\n        change = _this3.getChildlistChange(mutation.target);\n        oldPrevious = mutation.previousSibling;\n\n\n        function recordOldPrevious(node, previous) {\n            if (!node || change.oldPrevious.has(node) || change.added.has(node) || change.maybeMoved.has(node)) return;\n\n            if (previous && (change.added.has(previous) || change.maybeMoved.has(previous))) return;\n\n            change.oldPrevious.set(node, previous);\n        }\n\n        for (j = 0; j < mutation.removedNodes.length; j++) {\n            node = mutation.removedNodes[j];\n\n            recordOldPrevious(node, oldPrevious);\n\n            if (change.added.has(node)) {\n                change.added.delete(node);\n            } else {\n                change.removed.set(node, true);\n                change.maybeMoved.delete(node);\n            }\n\n            oldPrevious = node;\n        }\n\n        recordOldPrevious(mutation.nextSibling, oldPrevious);\n\n        for (j = 0; j < mutation.addedNodes.length; j++) {\n            node = mutation.addedNodes[j];\n\n            if (change.removed.has(node)) {\n                change.removed.delete(node);\n                change.maybeMoved.set(node, true);\n            } else {\n                change.added.set(node, true);\n            }\n        }\n    };\n\n    for (var i = 0; i < this.mutations.length; i++) {\n        var mutation;\n        var change;\n        var oldPrevious;\n        var j;\n        var node;\n        var j;\n        var node;\n\n        var _ret = _loop();\n\n        if (_ret === 'continue') continue;\n    }\n};\n\nMutationProjection.prototype.wasReordered = function (node) {\n    if (!this.treeChanges.anyParentsChanged) return false;\n\n    this.processChildlistChanges();\n\n    var parentNode = node.parentNode;\n    var nodeChange = this.treeChanges.get(node);\n    if (nodeChange && nodeChange.oldParentNode) parentNode = nodeChange.oldParentNode;\n\n    var change = this.childListChangeMap.get(parentNode);\n    if (!change) return false;\n\n    if (change.moved) return change.moved.get(node);\n\n    change.moved = new NodeMap();\n    var pendingMoveDecision = new NodeMap();\n\n    function isMoved(node) {\n        if (!node) return false;\n        if (!change.maybeMoved.has(node)) return false;\n\n        var didMove = change.moved.get(node);\n        if (didMove !== undefined) return didMove;\n\n        if (pendingMoveDecision.has(node)) {\n            didMove = true;\n        } else {\n            pendingMoveDecision.set(node, true);\n            didMove = getPrevious(node) !== getOldPrevious(node);\n        }\n\n        if (pendingMoveDecision.has(node)) {\n            pendingMoveDecision.delete(node);\n            change.moved.set(node, didMove);\n        } else {\n            didMove = change.moved.get(node);\n        }\n\n        return didMove;\n    }\n\n    var oldPreviousCache = new NodeMap();\n    function getOldPrevious(node) {\n        var oldPrevious = oldPreviousCache.get(node);\n        if (oldPrevious !== undefined) return oldPrevious;\n\n        oldPrevious = change.oldPrevious.get(node);\n        while (oldPrevious && (change.removed.has(oldPrevious) || isMoved(oldPrevious))) {\n            oldPrevious = getOldPrevious(oldPrevious);\n        }\n\n        if (oldPrevious === undefined) oldPrevious = node.previousSibling;\n        oldPreviousCache.set(node, oldPrevious);\n\n        return oldPrevious;\n    }\n\n    var previousCache = new NodeMap();\n    function getPrevious(node) {\n        if (previousCache.has(node)) return previousCache.get(node);\n\n        var previous = node.previousSibling;\n        while (previous && (change.added.has(previous) || isMoved(previous))) {\n            previous = previous.previousSibling;\n        }previousCache.set(node, previous);\n        return previous;\n    }\n\n    change.maybeMoved.keys().forEach(isMoved);\n    return change.moved.get(node);\n};\n\nfunction Summary(projection, query) {\n    var _this = this;\n    this.projection = projection;\n    this.added = [];\n    this.removed = [];\n    this.reparented = query.all || query.element ? [] : undefined;\n    this.reordered = query.all ? [] : undefined;\n\n    projection.getChanged(this, query.elementFilter, query.characterData);\n\n    if (query.all || query.attribute || query.attributeList) {\n        var filter = query.attribute ? [query.attribute] : query.attributeList;\n        var attributeChanged = projection.attributeChangedNodes(filter);\n\n        if (query.attribute) {\n            this.valueChanged = attributeChanged[query.attribute] || [];\n        } else {\n            this.attributeChanged = attributeChanged;\n            if (query.attributeList) {\n                query.attributeList.forEach(function (attrName) {\n                    if (!_this.attributeChanged.hasOwnProperty(attrName)) _this.attributeChanged[attrName] = [];\n                });\n            }\n        }\n    }\n\n    if (query.all || query.characterData) {\n        var characterDataChanged = projection.getCharacterDataChanged();\n\n        if (query.characterData) this.valueChanged = characterDataChanged;else this.characterDataChanged = characterDataChanged;\n    }\n\n    if (this.reordered) this.getOldPreviousSibling = projection.getOldPreviousSibling.bind(projection);\n}\n\nSummary.prototype.getOldParentNode = function (node) {\n    return this.projection.getOldParentNode(node);\n};\n\nSummary.prototype.getOldAttribute = function (node, name) {\n    return this.projection.getOldAttribute(node, name);\n};\n\nSummary.prototype.getOldCharacterData = function (node) {\n    return this.projection.getOldCharacterData(node);\n};\n\nSummary.prototype.getOldPreviousSibling = function (node) {\n    return this.projection.getOldPreviousSibling(node);\n};\n\n// TODO (rafaelw): Allow ':' and '.' as valid name characters.\nvar validNameInitialChar = /[a-zA-Z_]+/;\nvar validNameNonInitialChar = /[a-zA-Z0-9_\\-]+/;\n\n// TODO: Consider allowing backslash in the attrValue.\n// TODO: There's got a to be way to represent this state machine\n// more compactly???\nfunction escapeQuotes(value) {\n    return '\"' + value.replace(/\"/, '\\\\\\\"') + '\"';\n}\n\nfunction Qualifier() {}\n\nQualifier.prototype.matches = function (oldValue) {\n    if (oldValue === null) return false;\n\n    if (this.attrValue === undefined) return true;\n\n    if (!this.contains) return this.attrValue == oldValue;\n\n    var tokens = oldValue.split(' ');\n    for (var i = 0; i < tokens.length; i++) {\n        if (this.attrValue === tokens[i]) return true;\n    }\n\n    return false;\n};\n\nQualifier.prototype.toString = function () {\n    if (this.attrName === 'class' && this.contains) return '.' + this.attrValue;\n\n    if (this.attrName === 'id' && !this.contains) return '#' + this.attrValue;\n\n    if (this.contains) return '[' + this.attrName + '~=' + escapeQuotes(this.attrValue) + ']';\n\n    if ('attrValue' in this) return '[' + this.attrName + '=' + escapeQuotes(this.attrValue) + ']';\n\n    return '[' + this.attrName + ']';\n};\n\nfunction Selector() {\n    this.nextUid = 1;\n    this.uid = this.nextUid++;\n    this.qualifiers = [];\n}\n\nObject.defineProperty(Selector.prototype, \"caseInsensitiveTagName\", {\n    get: function get() {\n        return this.tagName.toUpperCase();\n    },\n    enumerable: true,\n    configurable: true\n});\n\nObject.defineProperty(Selector.prototype, \"selectorString\", {\n    get: function get() {\n        return this.tagName + this.qualifiers.join('');\n    },\n    enumerable: true,\n    configurable: true\n});\n\nSelector.prototype.isMatching = function (el) {\n    return el[this.matchesSelector](this.selectorString);\n};\n\nSelector.prototype.wasMatching = function (el, change, isMatching) {\n    if (!change || !change.attributes) return isMatching;\n\n    var tagName = change.isCaseInsensitive ? this.caseInsensitiveTagName : this.tagName;\n    if (tagName !== '*' && tagName !== el.tagName) return false;\n\n    var attributeOldValues = [];\n    var anyChanged = false;\n    for (var i = 0; i < this.qualifiers.length; i++) {\n        var qualifier = this.qualifiers[i];\n        var oldValue = change.getAttributeOldValue(qualifier.attrName);\n        attributeOldValues.push(oldValue);\n        anyChanged = anyChanged || oldValue !== undefined;\n    }\n\n    if (!anyChanged) return isMatching;\n\n    for (var i = 0; i < this.qualifiers.length; i++) {\n        var qualifier = this.qualifiers[i];\n        var oldValue = attributeOldValues[i];\n        if (oldValue === undefined) oldValue = el.getAttribute(qualifier.attrName);\n        if (!qualifier.matches(oldValue)) return false;\n    }\n\n    return true;\n};\n\nSelector.prototype.matchabilityChange = function (el, change) {\n    var isMatching = this.isMatching(el);\n    if (isMatching) return this.wasMatching(el, change, isMatching) ? 2 /* STAYED_IN */ : 1 /* ENTERED */;else return this.wasMatching(el, change, isMatching) ? 5 /* EXITED */ : 0 /* STAYED_OUT */;\n};\n\nSelector.parseSelectors = function (input) {\n    var selectors = [];\n    var currentSelector;\n    var currentQualifier;\n\n    function newSelector() {\n        if (currentSelector) {\n            if (currentQualifier) {\n                currentSelector.qualifiers.push(currentQualifier);\n                currentQualifier = undefined;\n            }\n\n            selectors.push(currentSelector);\n        }\n        currentSelector = new Selector();\n    }\n\n    function newQualifier() {\n        if (currentQualifier) currentSelector.qualifiers.push(currentQualifier);\n\n        currentQualifier = new Qualifier();\n    }\n\n    var WHITESPACE = /\\s/;\n    var valueQuoteChar;\n    var SYNTAX_ERROR = 'Invalid or unsupported selector syntax.';\n\n    var SELECTOR = 1;\n    var TAG_NAME = 2;\n    var QUALIFIER = 3;\n    var QUALIFIER_NAME_FIRST_CHAR = 4;\n    var QUALIFIER_NAME = 5;\n    var ATTR_NAME_FIRST_CHAR = 6;\n    var ATTR_NAME = 7;\n    var EQUIV_OR_ATTR_QUAL_END = 8;\n    var EQUAL = 9;\n    var ATTR_QUAL_END = 10;\n    var VALUE_FIRST_CHAR = 11;\n    var VALUE = 12;\n    var QUOTED_VALUE = 13;\n    var SELECTOR_SEPARATOR = 14;\n\n    var state = SELECTOR;\n    var i = 0;\n    while (i < input.length) {\n        var c = input[i++];\n\n        switch (state) {\n            case SELECTOR:\n                if (c.match(validNameInitialChar)) {\n                    newSelector();\n                    currentSelector.tagName = c;\n                    state = TAG_NAME;\n                    break;\n                }\n\n                if (c == '*') {\n                    newSelector();\n                    currentSelector.tagName = '*';\n                    state = QUALIFIER;\n                    break;\n                }\n\n                if (c == '.') {\n                    newSelector();\n                    newQualifier();\n                    currentSelector.tagName = '*';\n                    currentQualifier.attrName = 'class';\n                    currentQualifier.contains = true;\n                    state = QUALIFIER_NAME_FIRST_CHAR;\n                    break;\n                }\n                if (c == '#') {\n                    newSelector();\n                    newQualifier();\n                    currentSelector.tagName = '*';\n                    currentQualifier.attrName = 'id';\n                    state = QUALIFIER_NAME_FIRST_CHAR;\n                    break;\n                }\n                if (c == '[') {\n                    newSelector();\n                    newQualifier();\n                    currentSelector.tagName = '*';\n                    currentQualifier.attrName = '';\n                    state = ATTR_NAME_FIRST_CHAR;\n                    break;\n                }\n\n                if (c.match(WHITESPACE)) break;\n\n                throw Error(SYNTAX_ERROR);\n\n            case TAG_NAME:\n                if (c.match(validNameNonInitialChar)) {\n                    currentSelector.tagName += c;\n                    break;\n                }\n\n                if (c == '.') {\n                    newQualifier();\n                    currentQualifier.attrName = 'class';\n                    currentQualifier.contains = true;\n                    state = QUALIFIER_NAME_FIRST_CHAR;\n                    break;\n                }\n                if (c == '#') {\n                    newQualifier();\n                    currentQualifier.attrName = 'id';\n                    state = QUALIFIER_NAME_FIRST_CHAR;\n                    break;\n                }\n                if (c == '[') {\n                    newQualifier();\n                    currentQualifier.attrName = '';\n                    state = ATTR_NAME_FIRST_CHAR;\n                    break;\n                }\n\n                if (c.match(WHITESPACE)) {\n                    state = SELECTOR_SEPARATOR;\n                    break;\n                }\n\n                if (c == ',') {\n                    state = SELECTOR;\n                    break;\n                }\n\n                throw Error(SYNTAX_ERROR);\n\n            case QUALIFIER:\n                if (c == '.') {\n                    newQualifier();\n                    currentQualifier.attrName = 'class';\n                    currentQualifier.contains = true;\n                    state = QUALIFIER_NAME_FIRST_CHAR;\n                    break;\n                }\n                if (c == '#') {\n                    newQualifier();\n                    currentQualifier.attrName = 'id';\n                    state = QUALIFIER_NAME_FIRST_CHAR;\n                    break;\n                }\n                if (c == '[') {\n                    newQualifier();\n                    currentQualifier.attrName = '';\n                    state = ATTR_NAME_FIRST_CHAR;\n                    break;\n                }\n\n                if (c.match(WHITESPACE)) {\n                    state = SELECTOR_SEPARATOR;\n                    break;\n                }\n\n                if (c == ',') {\n                    state = SELECTOR;\n                    break;\n                }\n\n                throw Error(SYNTAX_ERROR);\n\n            case QUALIFIER_NAME_FIRST_CHAR:\n                if (c.match(validNameInitialChar)) {\n                    currentQualifier.attrValue = c;\n                    state = QUALIFIER_NAME;\n                    break;\n                }\n\n                throw Error(SYNTAX_ERROR);\n\n            case QUALIFIER_NAME:\n                if (c.match(validNameNonInitialChar)) {\n                    currentQualifier.attrValue += c;\n                    break;\n                }\n\n                if (c == '.') {\n                    newQualifier();\n                    currentQualifier.attrName = 'class';\n                    currentQualifier.contains = true;\n                    state = QUALIFIER_NAME_FIRST_CHAR;\n                    break;\n                }\n                if (c == '#') {\n                    newQualifier();\n                    currentQualifier.attrName = 'id';\n                    state = QUALIFIER_NAME_FIRST_CHAR;\n                    break;\n                }\n                if (c == '[') {\n                    newQualifier();\n                    state = ATTR_NAME_FIRST_CHAR;\n                    break;\n                }\n\n                if (c.match(WHITESPACE)) {\n                    state = SELECTOR_SEPARATOR;\n                    break;\n                }\n                if (c == ',') {\n                    state = SELECTOR;\n                    break;\n                }\n\n                throw Error(SYNTAX_ERROR);\n\n            case ATTR_NAME_FIRST_CHAR:\n                if (c.match(validNameInitialChar)) {\n                    currentQualifier.attrName = c;\n                    state = ATTR_NAME;\n                    break;\n                }\n\n                if (c.match(WHITESPACE)) break;\n\n                throw Error(SYNTAX_ERROR);\n\n            case ATTR_NAME:\n                if (c.match(validNameNonInitialChar)) {\n                    currentQualifier.attrName += c;\n                    break;\n                }\n\n                if (c.match(WHITESPACE)) {\n                    state = EQUIV_OR_ATTR_QUAL_END;\n                    break;\n                }\n\n                if (c == '~') {\n                    currentQualifier.contains = true;\n                    state = EQUAL;\n                    break;\n                }\n\n                if (c == '=') {\n                    currentQualifier.attrValue = '';\n                    state = VALUE_FIRST_CHAR;\n                    break;\n                }\n\n                if (c == ']') {\n                    state = QUALIFIER;\n                    break;\n                }\n\n                throw Error(SYNTAX_ERROR);\n\n            case EQUIV_OR_ATTR_QUAL_END:\n                if (c == '~') {\n                    currentQualifier.contains = true;\n                    state = EQUAL;\n                    break;\n                }\n\n                if (c == '=') {\n                    currentQualifier.attrValue = '';\n                    state = VALUE_FIRST_CHAR;\n                    break;\n                }\n\n                if (c == ']') {\n                    state = QUALIFIER;\n                    break;\n                }\n\n                if (c.match(WHITESPACE)) break;\n\n                throw Error(SYNTAX_ERROR);\n\n            case EQUAL:\n                if (c == '=') {\n                    currentQualifier.attrValue = '';\n                    state = VALUE_FIRST_CHAR;\n                    break;\n                }\n\n                throw Error(SYNTAX_ERROR);\n\n            case ATTR_QUAL_END:\n                if (c == ']') {\n                    state = QUALIFIER;\n                    break;\n                }\n\n                if (c.match(WHITESPACE)) break;\n\n                throw Error(SYNTAX_ERROR);\n\n            case VALUE_FIRST_CHAR:\n                if (c.match(WHITESPACE)) break;\n\n                if (c == '\"' || c == \"'\") {\n                    valueQuoteChar = c;\n                    state = QUOTED_VALUE;\n                    break;\n                }\n\n                currentQualifier.attrValue += c;\n                state = VALUE;\n                break;\n\n            case VALUE:\n                if (c.match(WHITESPACE)) {\n                    state = ATTR_QUAL_END;\n                    break;\n                }\n                if (c == ']') {\n                    state = QUALIFIER;\n                    break;\n                }\n                if (c == \"'\" || c == '\"') throw Error(SYNTAX_ERROR);\n\n                currentQualifier.attrValue += c;\n                break;\n\n            case QUOTED_VALUE:\n                if (c == valueQuoteChar) {\n                    state = ATTR_QUAL_END;\n                    break;\n                }\n\n                currentQualifier.attrValue += c;\n                break;\n\n            case SELECTOR_SEPARATOR:\n                if (c.match(WHITESPACE)) break;\n\n                if (c == ',') {\n                    state = SELECTOR;\n                    break;\n                }\n\n                throw Error(SYNTAX_ERROR);\n        }\n    }\n\n    switch (state) {\n        case SELECTOR:\n        case TAG_NAME:\n        case QUALIFIER:\n        case QUALIFIER_NAME:\n        case SELECTOR_SEPARATOR:\n            // Valid end states.\n            newSelector();\n            break;\n        default:\n            throw Error(SYNTAX_ERROR);\n    }\n\n    if (!selectors.length) throw Error(SYNTAX_ERROR);\n\n    return selectors;\n};\n\nSelector.matchesSelector = function () {\n    var element = document.createElement('div');\n    if (typeof element['webkitMatchesSelector'] === 'function') return 'webkitMatchesSelector';\n    if (typeof element['mozMatchesSelector'] === 'function') return 'mozMatchesSelector';\n    if (typeof element['msMatchesSelector'] === 'function') return 'msMatchesSelector';\n\n    return 'matchesSelector';\n};\n\nvar attributeFilterPattern = /^([a-zA-Z:_]+[a-zA-Z0-9_\\-:\\.]*)$/;\n\nfunction validateAttribute(attribute) {\n    if (typeof attribute != 'string') throw Error('Invalid request opion. attribute must be a non-zero length string.');\n\n    attribute = attribute.trim();\n\n    if (!attribute) throw Error('Invalid request opion. attribute must be a non-zero length string.');\n\n    if (!attribute.match(attributeFilterPattern)) throw Error('Invalid request option. invalid attribute name: ' + attribute);\n\n    return attribute;\n}\n\nfunction validateElementAttributes(attribs) {\n    if (!attribs.trim().length) throw Error('Invalid request option: elementAttributes must contain at least one attribute.');\n\n    var lowerAttributes = {};\n    var attributes = {};\n\n    var tokens = attribs.split(/\\s+/);\n    for (var i = 0; i < tokens.length; i++) {\n        var name = tokens[i];\n        if (!name) continue;\n\n        var name = validateAttribute(name);\n        var nameLower = name.toLowerCase();\n        if (lowerAttributes[nameLower]) throw Error('Invalid request option: observing multiple case variations of the same attribute is not supported.');\n\n        attributes[name] = true;\n        lowerAttributes[nameLower] = true;\n    }\n\n    return Object.keys(attributes);\n}\n\nfunction elementFilterAttributes(selectors) {\n    var attributes = {};\n\n    selectors.forEach(function (selector) {\n        selector.qualifiers.forEach(function (qualifier) {\n            attributes[qualifier.attrName] = true;\n        });\n    });\n\n    return Object.keys(attributes);\n}\n\nfunction MutationSummary(opts) {\n    var _this = this;\n\n    this.connected = false;\n    this.options = this.validateOptions(opts);\n    this.observerOptions = this.createObserverOptions(this.options.queries);\n    this.root = this.options.rootNode;\n    this.callback = this.options.callback;\n\n    this.elementFilter = Array.prototype.concat.apply([], this.options.queries.map(function (query) {\n        return query.elementFilter ? query.elementFilter : [];\n    }));\n\n    if (!this.elementFilter.length) this.elementFilter = undefined;\n\n    this.calcReordered = this.options.queries.some(function (query) {\n        return query.all;\n    });\n\n    this.queryValidators = [];\n\n    if (this.createQueryValidator) {\n        this.queryValidators = this.options.queries.map(function (query) {\n            return this.createQueryValidator(_this.root, query);\n        });\n    }\n\n    this.observer = new MutationObserverCtor(function (mutations) {\n        _this.observerCallback(mutations);\n    });\n\n    this.reconnect();\n}\n\nMutationSummary.prototype.createObserverOptions = function (queries) {\n\n    var observerOptions = {\n        childList: true,\n        subtree: true\n    };\n\n    var attributeFilter;\n\n    function observeAttributes(attributes) {\n        if (observerOptions.attributes && !attributeFilter) return;\n\n        observerOptions.attributes = true;\n        observerOptions.attributeOldValue = true;\n\n        if (!attributes) {\n            // observe all.\n            attributeFilter = undefined;\n            return;\n        }\n\n        // add to observed.\n        attributeFilter = attributeFilter || {};\n        attributes.forEach(function (attribute) {\n            attributeFilter[attribute] = true;\n            attributeFilter[attribute.toLowerCase()] = true;\n        });\n    }\n\n    queries.forEach(function (query) {\n        if (query.characterData) {\n            observerOptions.characterData = true;\n            observerOptions.characterDataOldValue = true;\n            return;\n        }\n\n        if (query.all) {\n            observeAttributes();\n            observerOptions.characterData = true;\n            observerOptions.characterDataOldValue = true;\n            return;\n        }\n\n        if (query.attribute) {\n            observeAttributes([query.attribute.trim()]);\n            return;\n        }\n\n        var attributes = elementFilterAttributes(query.elementFilter).concat(query.attributeList || []);\n        if (attributes.length) observeAttributes(attributes);\n    });\n\n    if (attributeFilter) observerOptions.attributeFilter = Object.keys(attributeFilter);\n\n    return observerOptions;\n};\n\nMutationSummary.prototype.validateOptions = function (options) {\n\n    for (var prop in options) {\n        if (!(prop in MutationSummary.optionKeys)) throw Error('Invalid option: ' + prop);\n    }\n\n    if (typeof options.callback !== 'function') throw Error('Invalid options: callback is required and must be a function');\n\n    if (!options.queries || !options.queries.length) throw Error('Invalid options: queries must contain at least one query request object.');\n\n    var opts = {\n        callback: options.callback,\n        rootNode: options.rootNode || document,\n        observeOwnChanges: !!options.observeOwnChanges,\n        oldPreviousSibling: !!options.oldPreviousSibling,\n        queries: []\n    };\n\n    for (var i = 0; i < options.queries.length; i++) {\n        var request = options.queries[i];\n\n        // all\n        if (request.all) {\n            if (Object.keys(request).length > 1) throw Error('Invalid request option. all has no options.');\n\n            opts.queries.push({ all: true });\n            continue;\n        }\n\n        // attribute\n        if ('attribute' in request) {\n            var query = {\n                attribute: validateAttribute(request.attribute)\n            };\n\n            query.elementFilter = Selector.parseSelectors('*[' + query.attribute + ']');\n\n            if (Object.keys(request).length > 1) throw Error('Invalid request option. attribute has no options.');\n\n            opts.queries.push(query);\n            continue;\n        }\n\n        // element\n        if ('element' in request) {\n            var requestOptionCount = Object.keys(request).length;\n            var query = {\n                element: request.element,\n                elementFilter: Selector.parseSelectors(request.element)\n            };\n\n            if (request.hasOwnProperty('elementAttributes')) {\n                query.attributeList = validateElementAttributes(request.elementAttributes);\n                requestOptionCount--;\n            }\n\n            if (requestOptionCount > 1) throw Error('Invalid request option. element only allows elementAttributes option.');\n\n            opts.queries.push(query);\n            continue;\n        }\n\n        // characterData\n        if (request.characterData) {\n            if (Object.keys(request).length > 1) throw Error('Invalid request option. characterData has no options.');\n\n            opts.queries.push({ characterData: true });\n            continue;\n        }\n\n        throw Error('Invalid request option. Unknown query request.');\n    }\n\n    return opts;\n};\n\nMutationSummary.prototype.createSummaries = function (mutations) {\n    if (!mutations || !mutations.length) return [];\n\n    var projection = new MutationProjection(this.root, mutations, this.elementFilter, this.calcReordered, this.options.oldPreviousSibling);\n\n    var summaries = [];\n    for (var i = 0; i < this.options.queries.length; i++) {\n        summaries.push(new Summary(projection, this.options.queries[i]));\n    }\n\n    return summaries;\n};\n\nMutationSummary.prototype.checkpointQueryValidators = function () {\n    this.queryValidators.forEach(function (validator) {\n        if (validator) validator.recordPreviousState();\n    });\n};\n\nMutationSummary.prototype.runQueryValidators = function (summaries) {\n    this.queryValidators.forEach(function (validator, index) {\n        if (validator) validator.validate(summaries[index]);\n    });\n};\n\nMutationSummary.prototype.changesToReport = function (summaries) {\n    return summaries.some(function (summary) {\n        var summaryProps = ['added', 'removed', 'reordered', 'reparented', 'valueChanged', 'characterDataChanged'];\n        if (summaryProps.some(function (prop) {\n            return summary[prop] && summary[prop].length;\n        })) return true;\n\n        if (summary.attributeChanged) {\n            var attrNames = Object.keys(summary.attributeChanged);\n            var attrsChanged = attrNames.some(function (attrName) {\n                return !!summary.attributeChanged[attrName].length;\n            });\n            if (attrsChanged) return true;\n        }\n        return false;\n    });\n};\n\nMutationSummary.prototype.observerCallback = function (mutations) {\n    if (!this.options.observeOwnChanges) this.observer.disconnect();\n\n    var summaries = this.createSummaries(mutations);\n    this.runQueryValidators(summaries);\n\n    if (this.options.observeOwnChanges) this.checkpointQueryValidators();\n\n    if (this.changesToReport(summaries)) this.callback(summaries);\n\n    // disconnect() may have been called during the callback.\n    if (!this.options.observeOwnChanges && this.connected) {\n        this.checkpointQueryValidators();\n        this.observer.observe(this.root, this.observerOptions);\n    }\n};\n\nMutationSummary.prototype.reconnect = function () {\n    if (this.connected) throw Error('Already connected');\n\n    this.observer.observe(this.root, this.observerOptions);\n    this.connected = true;\n    this.checkpointQueryValidators();\n};\n\nMutationSummary.prototype.takeSummaries = function () {\n    if (!this.connected) throw Error('Not connected');\n\n    var summaries = this.createSummaries(this.observer.takeRecords());\n    return this.changesToReport(summaries) ? summaries : undefined;\n};\n\nMutationSummary.prototype.disconnect = function () {\n    var summaries = this.takeSummaries();\n    this.observer.disconnect();\n    this.connected = false;\n    return summaries;\n};\n\nMutationSummary.NodeMap = NodeMap;\nMutationSummary.parseElementFilter = Selector.parseSelectors;\nMutationSummary.optionKeys = {\n    'callback': true,\n    'queries': true,\n    'rootNode': true,\n    'oldPreviousSibling': true,\n    'observeOwnChanges': true\n};\n\nmodule.exports = {\n    MutationSummary: MutationSummary\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");
},function(module,exports,__webpack_require__){"use strict";eval('"use strict";\n\nvar _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\nvar _treeMirror = __webpack_require__(/*! ./tree-mirror */ 0);\n\nif ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") {\n  window.TreeMirror = _treeMirror.TreeMirror;\n  window.TreeMirrorClient = _treeMirror.TreeMirrorClient;\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvaW5kZXguanM/MWZkZiIsIndlYnBhY2s6Ly8vP2Q0MWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJlZU1pcnJvciwgVHJlZU1pcnJvckNsaWVudCB9IGZyb20gJy4vdHJlZS1taXJyb3InO1xuXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikge1xuICB3aW5kb3cuVHJlZU1pcnJvciA9IFRyZWVNaXJyb3I7XG4gIHdpbmRvdy5UcmVlTWlycm9yQ2xpZW50ID0gVHJlZU1pcnJvckNsaWVudDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvaW5kZXguanMiLCJ1bmRlZmluZWRcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUNDQTsiLCJzb3VyY2VSb290IjoiIn0=')}]);